Design and develop MLops framework for Data-centric AI

Client Background Client A leading tech firm in the USA Industry Type IT Services SaaS, Products Organization Size 100 The Problem The task involves finding models and tools for several different tasks across various domains. The tasks include video and image capturing, working with documents such as PDF and Excel files, converting text to audio, audio capturing and transcription, translation to major languages, utilizing language models with a focus on Jina finetuner and its limitations, creative AI for generating pictures and designs, synthesizing language texts, creating Kibana dashboards and data storytelling, code creation for specific platforms like Editorjs and Nextjs, integrating Jina API inference into function blocks in EditorjsNextjs, UXUI creation for the front end of Editorjs and Nextjs, transfer learning and reinforcement learning, utilizing Wikipedia for general knowledge, and utilizing an epistemic model called EPINET. To fulfill this task, you will need to search for relevant models, tools, and resources specific to each task mentioned above. Our Solution Jina AI Hub to deliver an ecosystem of Core transformer model Distilled  Fine tuned models OKRsKPIs domain data  Book of knowledge  model  AI agents Ensembled models  AI teams Also delivered functions in the marketplace Voice interface, OpenAI Whisper transformer Multiple data types capturing of information (DocArray) CLIP model to mesh multiple data types into vectors Neural Search function and Generative AI function Automatic data labelling Used weight watcher to fine tune the model quality without CPUGPU cost Solution Architecture Automatic selection a model for fine tuning with data corpus (book of knowledge), given the best performance. Add the model to an API inference Unlike ChatGPT the model can specify when they dont know and acknowledge it instead of making stuff up with its creative ability. When the model knows what it doesnt know, it can ask to go back and consult other models for joint predictions. Add a function to select ensembled models for joint prediction when step 4 occurs. Deliverables Identify core transformer models Clean and stabilize selected core models Set up the process in Jina Hub Integrate FastAPIJina with our Jina Hub Integrate FastAPIArgillaKibana into our Jina Hub Tools used Jina HubAI, Python, Hugging Face, Argilla, Redis stack, Kibana Languagetechniques used Python Models used Epistemic Neural Nets, weight watcher, OpenAI Whisper transformer, Epinet